"0","# These files take forever to read/load in, so all this code was run once and the output was saved to an RDS object which is then loaded in at the end. "
"0",""
"0","# steps_raw <- dir(""data/"", pattern = ""steps-*"") |>"
"0","#   map_df(~fromJSON(file.path(""data/"", .), flatten = TRUE))"
"0","#   "
"0","# steps <- steps_raw |>"
"0","#   separate(dateTime, into = c(""date"", ""time""), sep = "" "")"
"0","# "
"0","# steps <- steps |>"
"0","#   mutate(date = lubridate::mdy(date), "
"0","#          time = lubridate::hms(time), "
"0","#          steps = as.numeric(value)) |>"
"0","#   select(-c(value)) |>"
"0","#   filter(date >= ""2016-03-01"")"
"0","# "
"0","# steps <- steps |> "
"0","#   group_by(date) |> "
"0","#   summarize(steps_daily = sum(steps))"
"0","#   "
"0","# steps$steps_daily[steps$steps_daily == 0] <- NA"
"0",""
"0","# apply(steps, 2, VIM::countNA)"
"0","# which(is.na(steps$steps_daily), arr.ind = TRUE)"
"0",""
"0","#There are 4 total days that have 0 steps. There are more days with a silly number of steps (<20) which indicates I left it to charge for 95% of the day and just put it on before bed. I will only count 0 step days as NA. There is no systematic pattern to these missing days. I think the best thing to do is to impute values with the median, so as to exclude the effect of outliers. "
"0",""
"0","# steps <- naniar::impute_median_all(steps)"
"0",""
"0","steps <- readRDS(""cache/steps.rds"")"
