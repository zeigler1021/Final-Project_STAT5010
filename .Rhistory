daily_data %>%
pivot_longer(3:12)
test <- daily_data %>%
pivot_longer(3:12)
View(test)
test <- daily_data %>%
pivot_longer(3:12) %>%
ggplot(aes(x = high_deviation, y = value)) +
geom_boxplot() +
facet_wrap(~name)
test
View(spotify)
test <- spotify %>%
pivot_longer(29:32, 12:13, 16:21) %>%
ggplot(aes(x = high_deviation, y = value)) +
geom_boxplot() +
facet_wrap(~name)
spotify %>%
pivot_longer(12, 13, 16:21, 29:32)
spotify %>%
pivot_longer(12, 13)
test <- spotify %>%
pivot_longer(c(12, 13, 16:21, 29:32)) %>%
ggplot(aes(x = high_deviation, y = value)) +
geom_boxplot() +
facet_wrap(~name)
test
View(daily_data)
View(daily_data)
#This reveals nothing bc of te way I defined "high deviation"
test <- daily_data %>%
pivot_longer(3:12) %>%
ggplot(aes(x = steps_desc, y = value)) +
geom_boxplot() +
facet_wrap(~name)
test
summary(lm(instrumentalness_daily ~ steps_desc, data= daily_data))
summary(lm(energy_daily ~ steps_desc, daily_data))
summary(lm(danceability_daily ~ steps_desc, daily_data))
plot(lm(danceability_daily ~ steps_desc, daily_data))
ggplot(daily_data, aes(x = steps, y = danceability_daily)) +
geom_point()
ggplot(daily_data, aes(x = steps_daily, y = danceability_daily)) +
geom_point()
ggplot(daily_data, aes(x = steps_daily, y = danceability_daily, color = steps_desc)) +
geom_point()
ggplot(daily_data, aes(x = steps_daily, y = danceability_daily, color = steps_desc)) +
geom_point() +
geom_smooth(method = "lm")
#This reveals nothing bc of te way I defined "high deviation"
test <- daily_data %>%
pivot_longer(3:12) %>%
ggplot(aes(x = weather_desc, y = value)) +
geom_boxplot() +
facet_wrap(~name)
test
fitted_models <- daily_data %>%
pivot_longer(3:12) %>%
group_by(name) %>%
do(model = lm(name ~ weather_desc, data = .))
fitted_models <- daily_data %>%
pivot_longer(3:12) %>%
group_by(name) %>%
nest()
View(fitted_models)
View(fitted_models[[2]][[1]])
fitted_models <- daily_data %>%
pivot_longer(3:12) %>%
group_by(name) %>%
nest() %>%
mutate(model = map(data, ~lm(name ~ weather_dec, data = .)))
fitted_models <- daily_data %>%
pivot_longer(3:12) %>%
group_by(name) %>%
nest() %>%
mutate(model = map(data, ~lm(name ~ weather_desc, data = .)))
summary(lm(acoustiness_daily ~ weather_desc, data= daily_data))
summary(lm(acousticness_daily ~ weather_desc, data= daily_data))
daily_data_ts <- as.xts(read.zoo(daily_data, format = "%Y-%m-%d"))
audio_features <- daily_data %>%
select(-c(mins_daily, steps_daily, tmax, tmin, precip, snow, snowcover))
audio_features_ts <- as.xts(read.zoo(audio_features, format = "%Y-%m-%d"))
plot(daily_data_ts)
plot(audio_features_ts)
View(audio_features_ts)
daily_data_ts <- as.xts(read.zoo(daily_data, format = "%Y-%m-%d"))
plot(daily_data_ts)
View(audio_features_ts)
View(daily_data_ts)
daily_data_ts <- daily_data %>%
select(-c(steps_desc, weather_desc))
daily_data_ts <- as.xts(read.zoo(daily_data, format = "%Y-%m-%d"))
plot(daily_data_ts)
View(daily_data_ts)
daily_data_ts <- daily_data %>%
select(-c(steps_desc, weather_desc))
daily_data_ts <- as.xts(read.zoo(daily_data_ts, format = "%Y-%m-%d"))
plot(daily_data_ts)
plot(daily_data_ts, legend.loc = "center")
plot(daily_data_ts, legend.loc = "bottomright")
plot(daily_data_ts, legend.loc = "topleft")
audio_features <- daily_data %>%
select(-c(mins_daily, steps_daily, tmax, tmin, precip, snow, snowcover, steps_desc, weather_desc))
audio_features_ts <- as.xts(read.zoo(audio_features, format = "%Y-%m-%d"))
plot(audio_features_ts)
View(audio_features_ts)
audio_features <- daily_data %>%
select(-c(mins_daily, steps_daily, tmax, tmin, tmean, precip, snow, snowcover, steps_desc, weather_desc))
audio_features_ts <- as.xts(read.zoo(audio_features, format = "%Y-%m-%d"))
plot(audio_features_ts)
plot(rollmean(audio_features_ts, 7))
plot(rollmean(audio_features_ts, 300))
plot(rollmean(audio_features_ts, 7))
plot(rollmean(audio_features_ts, 7), multi.panel = TRUE)
plot(audio_features_ts, multi.panel = TRUE)
ggplot(daily_data, aes(x = tmean, y = steps_daily)) +
geom_point()
ggplot(daily_data, aes(x = tmax, y = energy_daily)) +
geom_line()
ggplot(daily_data, aes(x = danceability_daily, y = valence_daily)) +
geom_point() +
geom_smooth(method = "lm")
View(spotify)
ggplot(spotify, aes(x = danceability, y = ms_played, color = high_deviation)) +
geom_point()
ggplot(spotify, aes(x = ms_played, y = danceability, color = high_deviation)) +
geom_point()
ggplot(spotify, aes(x = loudness_norm, y = tempo_norm, color = high_deviation)) +
geom_point()
ggplot(spotify, aes(x = energy, y = instrumentalness, color = high_deviation)) +
geom_point()
ggplot(daily_data, aes(x = steps_daily, y = danceability_daily, color = steps_desc)) +
geom_point() +
geom_smooth(method = "lm")
View(spotify)
ggplot(spotify, aes(x = liveness, color = high_deviation)) +
geom_boxplot()
ggplot(spotify, aes(y = liveness, color = high_deviation)) +
geom_boxplot()
View(spotify)
spotify %>%
pivot_longer(c(29:32,12,13,17:21)) %>%
ggplot(spotify, aes(y = value, color = high_deviation)) +
geom_boxplot() +
facet_wrap(~name)
spotify %>%
pivot_longer(c(29:32,12,13,17:21)) %>%
ggplot(mapping = aes(y = value, color = high_deviation)) +
geom_boxplot() +
facet_wrap(~name)
summary(lm(log(steps_daily) ~ log(mean.t), data = daily_data))
summary(lm(log(steps_daily) ~ log(tmean), data = daily_data))
summary(lm(log(tmean) ~ log(steps_daily), data = daily_data))
exp(3.685)
exp
exp(0.02459)
exp(1)
summary(lm(log(energy_norm)~log(steps_daily), data = daily_data))
summary(lm(log(energy_daily)~log(steps_daily), data = daily_data))
View(daily_data)
exp(0.535)
exp(-0.535)
summary(energy_daily ~ steps_daily, daily_data)
summary(lm(energy_daily ~ steps_daily, daily_data))
summary(lm(steps_daily ~ energy_Daily, daily_data))
summary(lm(steps_daily ~ energy_daily, daily_data))
summary(lm(steps_daily ~ instrumentalness, daily_data))
summary(lm(steps_daily ~ instrumentalness_daily, daily_data))
summary(lm(steps_daily ~ acousticness_daily, daily_data))
View(daily_data)
daily_data %>%
select(-c(1, 14:21))
daily_data %>%
select(-c(1, 14:21)) %>%
lm(steps_daily ~ .) %>%
summary()
help <- daily_data %>%
select(-c(1, 14:21))
lm(steps_daily ~ ., help)
summary(lm(steps_daily ~ ., help))
summary(lm(steps_daily ~ ., steps_daily))
steps_daily <- daily_data %>%
select(-c(1, 14:21))
summary(lm(steps_daily ~ ., steps_daily))
lmod_steps <- lm(steps_daily ~ ., steps_daily)
summary(lmod_steps)
performance::model_performance(lmod_steps)
View(audio_features)
corrplot::corrplot(audio_features[[,2:11]])
corrplot::corrplot(audio_features[,2:11])
audio_features[,2:11]
corrplot::corrplot(as.matrix(audio_features[,2:11]))
summary(lmod_steps)
VIF(lmod_steps)
cor::VIF(lmod_steps)
install.packages("cor")
install.packages("COR")
COR::VIF(lmod_steps)
vif(lmod_steps)
?vif
car::vif(lmod_steps)
summary(lmod_steps)
#Energy and loudness appear to be correlated according to VIF > 10
kappa(lmod_steps)
corr(lmod_steps)
cor(lmod_steps)
cor(audio_features[,2:11])
View(audio_features)
View(steps_daily)
cor(daily_data)
cor(daily_data)
cor(as.matrix(daily_data))
cor(as.matrix(steps_daily))
cor(as.matrix(steps_daily), use = "complete.obs")
rcorr(as.matrix(steps_daily), use = "complete.obs")
Hmisc::rcorr(as.matrix(steps_daily), use = "complete.obs")
Hmisc::rcorr(as.matrix(steps_daily),na.rm=TRUE)
Hmisc::rcorr(as.matrix(steps_daily))
corr_matrix <- Hmisc::rcorr(as.matrix(steps_daily))
View(corr_matrix)
corr_matrix[["P"]]
corr_matrix[[p]]
corr_matrix[[`p`]]
corr_matrix[[P]]
corr_matrix[[3]]
help<-corr_matrix[[3]]
View(help)
corrplot(steps_daily)
corrplot::corrplot(steps_daily)
corrplot::corrplot(steps_daily[,2:11])
corrplot::corrplot(as.matrix(steps_daily[,2:11]))
spotify <- spotify %>%
mutate(loudness_norm = (loudness - min(loudness))/(max(loudness)- min(loudness)),
#key_norm = (key - min(key))/(max(key) - min(key)),
tempo_norm = (tempo - min(tempo))/(max(tempo)- min(tempo)),
time_signature_norm = (time_signature - min(time_signature))/(max(time_signature) - min(time_signature)))
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyverse) # Easily Install and Load the 'Tidyverse'
library(spotifyr) # R Wrapper for the 'Spotify' Web API
library(jsonlite) # A Simple and Robust JSON Parser and Generator for R
library(VIM) # Visualization and Imputation of Missing Values
library(naniar) # Data Structures, Summaries, and Visualisations for Missing Data
library(zoo) # S3 Infrastructure for Regular and Irregular Time Series (Z's Ordered Observations)
library(xts) # eXtensible Time Series
library(corrplot)
library(car)
#functions
source("scripts/functions.R")
# connect spotifyr to spotify developer app
Sys.setenv(SPOTIFY_CLIENT_ID = 'b98702e41ca940509e67f7b297d87c2e')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'a06b83088a974c3696875a7d9fb13114')
access_token <- get_spotify_access_token()
# read in all .json files from directory as dataframes using jsonlite
spotify_raw <- dir("data/", pattern = "endsong_\\d.json") |>
map_df(~fromJSON(file.path("data/", .), flatten = TRUE))
# examine NA
apply(spotify_raw, 2, VIM::countNA)
hist(which(is.na(spotify_raw$master_metadata_track_name), arr.ind=TRUE), main = "Which row numbers contain NA?",  xlab= "Row number")
spotify <- spotify_raw |>
select(ts, ms_played, conn_country, master_metadata_track_name, master_metadata_album_artist_name, master_metadata_album_album_name, spotify_track_uri, reason_start, reason_end, shuffle) |>
drop_na() |>
separate(ts, into = c("date", "time"), sep = "T") |>
mutate(time = str_replace(time, "Z", "")) |>
mutate(date = lubridate::as_date(date),
time = lubridate::hms(time)) |>  #convert time to proper format
separate(spotify_track_uri, into = c("rm1", "rm2", "track_id"), sep = ":") |>
select(-c("rm1", "rm2"))  |>
filter(date >= "2016-03-01")
#This code was run only once to retrieve audio features. Output was saved as an RDS object in "cache/"
# track_id <- bind_cols(track_id = spotify$track_id,
#                       fl = gl(1285, k = 100)[1:128407]) |> #create factor levels to use group_split on
#   group_split(fl, .keep = FALSE)
#
# audio_features <- list()
#
# for (i in 1:length(track_id)) {
#   audio_features[[i]] <- spotifyr::get_track_audio_features(unlist(track_id[[i]]))
# }
#saveRDS(audio_features, "cache/audio_features.rds")
audio_features <- readRDS("cache/audio_features.rds")
audio_features <- data.table::rbindlist(audio_features) |>
rename(track_id = id)
spotify <- bind_cols(spotify, audio_features) |>
select(-c("track_id...24")) |>
rename(track_id = "track_id...8")
#Normalize and define audio features
#acousticness-- 0 to 1; 1 is high confidence track is acoustic
#danceability-- 0 to 1; 0 is least danceable, 1 is most danceable
#energy-- 0 to 1; 1 is high energy
#instrumentalness-- 0 to 1; values above 0.5 represent instrumental tracks, the closer the score to 1 the higher confidence
#key-- -1 to 11, mapped to keys. key 2 to key 8 (D,E, F, G-- mean is F/E#)
#loudness-- in decibels. loudness ranges between -60 and 0 dB. 0 db is loud, -60 is quiet
#mode-- major is 1; minor is 0
#speechiness-- exclusive speech = closer to 1, values above 0.66 = tracks that are mostly spoken, values between 0.66 and 0.33 have music + words; <0.33 = music
#tempo = bpm
#time signature-- number 3-7 indicating 3/4, 4,4, etc
#liveness-- 0 to 1; probability track was played lived. value > 0.8 high prob of live
#valence-- 0 to 1; 1= happy, 0 = sad
#key, loudness, tempo, time signature are NOT 0 to 1
spotify <- spotify |>
mutate(loudness_norm = (loudness - min(loudness))/(max(loudness)- min(loudness)),
#key_norm = (key - min(key))/(max(key) - min(key)),
tempo_norm = (tempo - min(tempo))/(max(tempo)- min(tempo)),
time_signature_norm = (time_signature - min(time_signature))/(max(time_signature) - min(time_signature)))
View(spotify)
spotify <- spotify |>
mutate(loudness_norm = (loudness - min(loudness))/(max(loudness)- min(loudness)),
#key_norm = (key - min(key))/(max(key) - min(key)),
tempo_norm = (tempo - min(tempo))/(max(tempo)- min(tempo)),
time_signature_norm = (time_signature - min(time_signature))/(max(time_signature) - min(time_signature))) %>%
select(-c(time, conn_country, reason_start, reason_end, type, uri, track_href, analysis_url))
spotify <- spotify |>
mutate(loudness_norm = (loudness - min(loudness))/(max(loudness)- min(loudness)),
#key_norm = (key - min(key))/(max(key) - min(key)),
tempo_norm = (tempo - min(tempo))/(max(tempo)- min(tempo)),
time_signature_norm = (time_signature - min(time_signature))/(max(time_signature) - min(time_signature))) %>%
select(-c(time, conn_country, reason_start, reason_end, type, uri, track_href, analysis_url)) %>%
relocate(21:23, before = 20)
spotify <- spotify %>% relocate(21:23, before = 20)
View(spotify)
?relocate
# read in all .json files from directory as dataframes using jsonlite
spotify_raw <- dir("data/", pattern = "endsong_\\d.json") |>
map_df(~fromJSON(file.path("data/", .), flatten = TRUE))
spotify <- spotify_raw |>
select(ts, ms_played, conn_country, master_metadata_track_name, master_metadata_album_artist_name, master_metadata_album_album_name, spotify_track_uri, reason_start, reason_end, shuffle) |>
drop_na() |>
separate(ts, into = c("date", "time"), sep = "T") |>
mutate(time = str_replace(time, "Z", "")) |>
mutate(date = lubridate::as_date(date),
time = lubridate::hms(time)) |>  #convert time to proper format
separate(spotify_track_uri, into = c("rm1", "rm2", "track_id"), sep = ":") |>
select(-c("rm1", "rm2"))  |>
filter(date >= "2016-03-01")
spotify <- bind_cols(spotify, audio_features) |>
select(-c("track_id...24")) |>
rename(track_id = "track_id...8")
spotify <- spotify |>
mutate(loudness_norm = (loudness - min(loudness))/(max(loudness)- min(loudness)),
#key_norm = (key - min(key))/(max(key) - min(key)),
tempo_norm = (tempo - min(tempo))/(max(tempo)- min(tempo)),
time_signature_norm = (time_signature - min(time_signature))/(max(time_signature) - min(time_signature))) %>%
select(-c(time, conn_country, reason_start, reason_end, type, uri, track_href, analysis_url)) %>%
relocate(21:23, .before = 20)
View(spotify)
# read in all .json files from directory as dataframes using jsonlite
spotify_raw <- dir("data/", pattern = "endsong_\\d.json") |>
map_df(~fromJSON(file.path("data/", .), flatten = TRUE))
# examine NA
apply(spotify_raw, 2, VIM::countNA)
hist(which(is.na(spotify_raw$master_metadata_track_name), arr.ind=TRUE), main = "Which row numbers contain NA?",  xlab= "Row number")
#I see that the NA are randomly scattered
#I note that 2,294 instances of streamed songs don't have track name/artist name/Spotify info/or album name. This is probably a result of music I uploaded to Spotify since it wasn't available on this platform (ie. songs I pirated from the UK lol). Since these songs are random, ie. MAR, I feel it is best to remove these entries since they are a small portion of my overall data set (1.75%) and I can't impute values into them. :) BYE
spotify <- spotify_raw |>
select(ts, ms_played, conn_country, master_metadata_track_name, master_metadata_album_artist_name, master_metadata_album_album_name, spotify_track_uri, reason_start, reason_end, shuffle) |>
drop_na() |>
separate(ts, into = c("date", "time"), sep = "T") |>
mutate(time = str_replace(time, "Z", "")) |>
mutate(date = lubridate::as_date(date),
time = lubridate::hms(time)) |>  #convert time to proper format
separate(spotify_track_uri, into = c("rm1", "rm2", "track_id"), sep = ":") |>
select(-c("rm1", "rm2"))  |>
filter(date >= "2016-03-01")
spotify <- bind_cols(spotify, audio_features) |>
select(-c("track_id...24")) |>
rename(track_id = "track_id...8")
spotify <- spotify |>
mutate(loudness_norm = (loudness - min(loudness))/(max(loudness)- min(loudness)),
#key_norm = (key - min(key))/(max(key) - min(key)),
tempo_norm = (tempo - min(tempo))/(max(tempo)- min(tempo)),
time_signature_norm = (time_signature - min(time_signature))/(max(time_signature) - min(time_signature))) %>%
select(-c(time, conn_country, reason_start, reason_end, type, uri, track_href, analysis_url, loudness, tempo, time_signature))
View(spotify)
spotify %<>% relocate(18:20, .before = 17)
library(magrittr)
spotify %<>% relocate(18:20, .before = 17)
View(spotify)
# Here I define what constitutes a 'high deviation track'. It is when the audio feature has a value outside ± 2*sd of that audio feature.
high_deviation <- spotify |>
mutate(row = row_number()) |>
pivot_longer(cols = c(danceability, energy, loudness_norm, valence, tempo_norm, acousticness, instrumentalness, speechiness)) |>
group_by(name) |>
mutate(mean_feature = mean(value),
sd_feature = sd(value)) |>
mutate(high_deviation = case_when(value >= (mean_feature + 2*sd_feature) | value <= (mean_feature) - 2*sd_feature ~ TRUE,
TRUE ~ FALSE))
#Here, I set up this dataframe to be mapped
high_deviation <- high_deviation |>
select(row, high_deviation) |>
group_by(row) |>
nest()
# Here, I have to determine if a single track has high deviation or not. I based that on if ANY single audio feature deviates. If a single audio feature for a track deviates, I mark the track as "high deviation"
high_deviation <- map(high_deviation[[2]], determine.deviation) |>
unlist()
#Here, I add the newly mapped 'high deviation' vector to my spotify data so I can use it!
spotify <- bind_cols(spotify, high_deviation = high_deviation)
weather_raw <- read_csv("data/weather_2016-2022.csv")
weather <- weather_raw |>
naniar::replace_with_na_all(condition = ~.x == -999.0) |>
unite("date", 1:3, sep = "-") |>
mutate(date = lubridate::ymd(date))
#since 4 dates don't exist, i will remove them. Other NA's exist for data that is missing for precip, snow, snowcover but since these are random days on which instruments were not recording, I don't see why they should be removed.
#I could impute values based on the tmin/tmax but again, idk.
apply(weather, 2, VIM::countNA)
weather <- weather |>
drop_na(date) |>
mutate(tmean = (tmax+tmin)/2) |>
filter(date >= "2016-03-01")
steps <- readRDS("cache/steps.rds")
spotify_daily <- spotify |>
group_by(date) |>
summarize(mins_daily = sum(ms_played)/1000,
danceability_daily = mean(danceability),
energy_daily = mean(energy),
key_norm_daily = mean(key_norm),
loudness_norm_daily = mean(loudness_norm),
speechiness_daily = mean(speechiness),
acousticness_daily = mean(acousticness),
instrumentalness_daily = mean(instrumentalness),
liveness_daily = mean(liveness),
valence_daily = mean(valence),
tempo_norm_daily = mean(tempo_norm))
daily_data <- full_join(spotify_daily, steps, join_by = "date") #introduce NA here, days where i have steps but no music data
daily_data <- full_join(daily_data, weather, join_by = "date")
daily_data <- filter(daily_data, date >= "2016-05-26") #Chose to filter from this date since I have extremely limited music data before this date
apply(daily_data, 2, VIM::countNA)
which(is.na(daily_data$mins_daily), arr.ind = TRUE)
#daily_data <- tidyr::drop_na(daily_data, mins_daily) #remove NA from music
spotify_daily <- spotify |>
group_by(date) |>
summarize(mins_daily = sum(ms_played)/1000,
danceability_daily = mean(danceability),
energy_daily = mean(energy),
loudness_norm_daily = mean(loudness_norm),
speechiness_daily = mean(speechiness),
acousticness_daily = mean(acousticness),
instrumentalness_daily = mean(instrumentalness),
liveness_daily = mean(liveness),
valence_daily = mean(valence),
tempo_norm_daily = mean(tempo_norm))
daily_data <- full_join(spotify_daily, steps, join_by = "date") #introduce NA here, days where i have steps but no music data
daily_data <- full_join(daily_data, weather, join_by = "date")
daily_data <- filter(daily_data, date >= "2016-05-26") #Chose to filter from this date since I have extremely limited music data before this date
apply(daily_data, 2, VIM::countNA)
which(is.na(daily_data$mins_daily), arr.ind = TRUE)
View(daily_data)
top_artists <- spotifyr::get_my_top_artists_or_tracks(type = "artists", 20) |>
filter(name != "We Butter The Bread With Butter")
top_artist_audio_features <- spotify |>
filter(master_metadata_album_artist_name %in% top_artists$name) |>
group_by(master_metadata_album_artist_name) |>
summarise(danceability_mean = mean(danceability),
energy_mean = mean(energy),
key_norm_mean = mean(key_norm),
loudness_norm_mean = mean(loudness_norm),
speechiness_mean = mean(speechiness),
acousticness_mean = mean(acousticness),
instrumentalness_mean = mean(instrumentalness),
liveness_mean = mean(liveness),
valence_mean = mean(valence),
tempo_norm_mean = mean(tempo_norm)) |>
bind_cols(popularity = top_artists$popularity)
top_artist_audio_features |>
pivot_longer(2:11) |>
ggplot(aes(x = popularity, y = value)) +
geom_point() +
facet_wrap(~name)
top_artist_audio_features <- spotify |>
filter(master_metadata_album_artist_name %in% top_artists$name) |>
group_by(master_metadata_album_artist_name) |>
summarise(danceability_mean = mean(danceability),
energy_mean = mean(energy),
loudness_norm_mean = mean(loudness_norm),
speechiness_mean = mean(speechiness),
acousticness_mean = mean(acousticness),
instrumentalness_mean = mean(instrumentalness),
liveness_mean = mean(liveness),
valence_mean = mean(valence),
tempo_norm_mean = mean(tempo_norm)) |>
bind_cols(popularity = top_artists$popularity)
top_artist_audio_features |>
pivot_longer(2:11) |>
ggplot(aes(x = popularity, y = value)) +
geom_point() +
facet_wrap(~name)
View(top_artist_audio_features)
top_artist_audio_features |>
pivot_longer(2:11)
top_artist_audio_features |>
pivot_longer(2:10) |>
ggplot(aes(x = popularity, y = value)) +
geom_point() +
facet_wrap(~name)
rm(steps_raw)
rm(weather_raw)
rm(spotify_raw)
rm(spotify_daily)
rm(top_artists)
rm(high_deviation)
daily_data <- daily_data |>
mutate(weather_desc = case_when(tmax > 60 & precip == 0 ~ "warm_sunny",
tmax < 40 & (precip == 0 | snow == 0) ~ "cold_sunny",
tmax > 60 & precip != 0 ~ "warm_cloudy",
tmax < 40 & (precip != 0 | snow != 0) ~ "cold_cloudy",
tmax >= 40 & tmax <= 60 ~ "average"),
steps_desc = case_when(steps_daily > 10000 ~ "super_active",
steps_daily <= 10000 & steps_daily >= 5000 ~ "active",
steps_daily < 5000 ~ "lazy"))
daily_data <- daily_data |>
mutate(weather_desc = relevel(x = factor(daily_data$weather_desc), ref = "average"),
steps_desc = relevel(x = factor(daily_data$steps_desc), ref = "lazy"))
