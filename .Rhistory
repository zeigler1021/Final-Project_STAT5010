apply(daily_data, 2, VIM::countNA)
which(is.na(daily_data$mins_daily), arr.ind = TRUE)
#All NA are at the bottom of the dataset but the dates they span are random ie. MAR.
#I did not remove NA's from this data set. They're probably interesting...
daily_data_scaled <- scale(daily_data[,2:11]) |>
bind_cols(date = daily_data$date) |>
relocate(date, .before = 1)
set.seed(123)
train_daily <- sample_n(daily_data_scaled, 0.8*nrow(daily_data))
test_daily <- anti_join(daily_data_scaled, train_daily)
rm(spotify_raw)
rm(spotify_daily)
rm(steps)
rm(audio_features)
gtsummary::tbl_summary(train_daily)
train_daily |>
select(1, 3:10) |>
pivot_longer(1:8) |>
ggplot(aes(x = value)) +
geom_histogram(fill = colors[[2]], color = "black", size = 0.2, bins = 15) +
facet_wrap(~name, scales = "free")  +
labs(x = "Standardized Audio Feature Score",
y = "Count") +
theme(panel.grid = element_blank(),
legend.position = "none")
# God DAMN my tempo is almost perfectly normally distributed...
train_daily |>
select(1, 3:10)
train_daily |>
select(1, 3:10) |>
pivot_longer(2:9) |>
ggplot(aes(x = value)) +
geom_histogram(fill = colors[[2]], color = "black", size = 0.2, bins = 15) +
facet_wrap(~name, scales = "free")  +
labs(x = "Standardized Audio Feature Score",
y = "Count") +
theme(panel.grid = element_blank(),
legend.position = "none")
#library(xtable)
mcor <- cor(na.omit(train_daily[,2:10]))
View(mcor)
upper<-as.data.frame(upper)
upper<- round(mcor,2)
upper[upper.tri(mcor)]<-""
upper<-as.data.frame(upper)
names(upper) <- NULL
View(upper)
rownames(upper) <- NULL
headers <- c("mins", "danceability", "energy", "loudness ","acousticness", "instrumentalness", "liveness", "valence", "tempo")
names(upper) <- headers
View(upper)
rownames(upper) <- headers
knitr::kable(upper)
gtsummary::tbl_summary(train_daily) |>
gt::tab_header("Table 1. Summary table showing the median and the 25th, 75th percentile and the number of missing values.")
gtsummary::tbl_summary(train_daily) |>
gt::as_gt() |>
gt::tab_header("Table 1. Summary table showing the median and the 25th, 75th percentile and the number of missing values.")
knitr::kable(gtsummary::tbl_summary(train_daily)) |>
gt::tab_header("Table 1. Summary table showing the median and the 25th, 75th percentile and the number of missing values.")
knitr::kable(gtsummary::tbl_summary(train_daily))
gtsummary::tbl_summary(train_daily) |>
modify_caption("Table 1. Summary table showing the median and the 25th, 75th percentile and the number of missing values.")
knitr::kable(upper,
caption = "Table 2. Correlation matrix. Note that large correlations indicate collinearity will be an issue for this dataset.")
knitr::kable(tibble(mspe_aic, mspe_bic),
caption = "Table 6. MSPE for both MLR models.")
#Mean Squared Prediction Error
mspe_aic <- mean((test_daily$steps_daily - predict.lm(lmod_steps_aic, test_daily))^2, na.rm = TRUE)
mspe_bic <- mean((test_daily$steps_daily - predict.lm(lmod_steps_bic, test_daily))^2, na.rm = TRUE)
train_daily <- train_daily |>
select(2:11)
lmod_steps <- lm(steps_daily ~ ., train_daily)
knitr::kable(broom::tidy(lmod_steps),
caption = "Table 3. Summary output of full model.")
model_selection <- ols_step_both_aic(lmod_steps)
#model_selection <- ols_step_all_possible(lmod_steps)
#both ols_step_all_possible and ols_step_both_aic select the same model
#plot(model_selection$aic)
lmod_steps_aic <- lm(steps_daily ~ mins_daily + danceability_daily + instrumentalness_daily + tempo_daily, data = train_daily)
#summary(lmod_steps_aic)
knitr::kable(broom::tidy(lmod_steps_aic),
caption = "Table 4. A summary table for the model selected by AIC.")
performance::check_model(lmod_steps_aic)
fitted_obs_aic <- as.data.frame(cbind(fitted = fitted(lmod_steps_aic),
obs = na.omit(train_daily)$steps_daily))
ggplot(fitted_obs_aic, aes(x= fitted, y = obs)) +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = "Fitted",
y= "Observed")
# plot(fitted(lmod_steps_aic), na.omit(train_daily)$steps_daily)
# abline(1,1)
regs <- leaps::regsubsets(steps_daily ~ ., data = train_daily)
regs <- summary(regs)
#plot(regs$bic)
lmod_steps_bic <- lm(steps_daily ~ tempo_daily + mins_daily + instrumentalness_daily, data = train_daily)
#summary(lmod_steps_bic)
knitr::kable(broom::tidy(lmod_steps_bic),
caption = "Table 5. A summary table for the model selected by BIC.")
fitted_obs_bic <- as.data.frame(cbind(fitted = fitted(lmod_steps_bic),
obs= na.omit(train_daily)$steps_daily))
ggplot(fitted_obs_bic, aes(x= fitted, y = obs)) +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
labs(x = "Fitted",
y= "Observed")
#Mean Squared Prediction Error
mspe_aic <- mean((test_daily$steps_daily - predict.lm(lmod_steps_aic, test_daily))^2, na.rm = TRUE)
mspe_bic <- mean((test_daily$steps_daily - predict.lm(lmod_steps_bic, test_daily))^2, na.rm = TRUE)
knitr::kable(tibble(mspe_aic, mspe_bic),
caption = "Table 6. MSPE for both MLR models.")
mod_comp <- performance::compare_performance(lmod_steps_aic, lmod_steps_bic)
knitr::kable(mod_comp,
caption = "Table 7. Overall metrics for model comparison.")
train_daily |>
select(1, 3:10) |>
pivot_longer(2:9) |>
ggplot(aes(x = value)) +
geom_histogram(fill = colors[[2]], color = "black", size = 0.2, bins = 15) +
facet_wrap(~name, scales = "free", nrow = 2)  +
labs(x = "Standardized Audio Feature Score",
y = "Count") +
theme(panel.grid = element_blank(),
legend.position = "none")
train_daily |>
select(steps_daily) |>
#pivot_longer() |>
ggplot(aes(x=steps_daily)) +
geom_histogram(fill = colors[[2]], color = "black", size = 0.2,bins = 15) +
#facet_wrap(~name, scales = "free") +
labs(x = "Standardized Steps Per Days",
y = "Count") +
theme(panel.grid = element_blank(),
legend.position = "none")
(p1 + p2) / (p3 + p4) + patchwork::plot_annotation(
title = "Added-Variable Plots",
subtitle = "steps ~ minutes + danceability + instrumentalness + tempo",
caption = "For each plot, all other predictors are being held constant")
avPlots.invis <- function(MODEL, ...) {
ff <- tempfile()
png(filename = ff)
OUT <- car::avPlots(MODEL, ...)
dev.off()
unlink(ff)
OUT }
avp <- avPlots.invis(lmod_steps_aic)
p1 <- ggplot(data = as.data.frame(avp[[1]]),
mapping = aes(x = mins_daily, y = steps_daily)) +
geom_point(fill = "transparent", color = "grey20") +
geom_smooth(method = 'lm', formula = 'y ~x', color = "#C2B280") +
labs(x = "Total Minutes Per Day",
y = "Steps Per Day") +
theme_bw() +
theme(panel.grid = element_blank())
p2 <- ggplot(data = as.data.frame(avp[[2]]),
mapping = aes(x = danceability_daily, y = steps_daily)) +
geom_point(color = "grey20") +
geom_smooth(method = 'lm', formula = 'y ~x', color = "#848482") +
labs(x = "Average Danceability Score",
y = "Steps Per Day") +
theme_bw() +
theme(panel.grid = element_blank())
p3 <- ggplot(data = as.data.frame(avp[[3]]),
mapping = aes(x = instrumentalness_daily, y = steps_daily)) +
geom_point( color = "grey20") +
geom_smooth(method = 'lm', formula = 'y ~x', color = "#008856") +
labs(x = "Average Instrumentalness Score",
y = "Steps Per Day") +
theme_bw() +
theme(panel.grid = element_blank())
p4 <- ggplot(data = as.data.frame(avp[[4]]),
mapping = aes(x = tempo_daily, y = steps_daily)) +
geom_point( color = "grey20") +
geom_smooth(method = 'lm', formula = 'y ~x', color = "#E68FAC") +
labs(x = "Average Tempo",
y = "Steps Per Day") +
theme_bw() +
theme(panel.grid = element_blank())
(p1 + p2) / (p3 + p4) + patchwork::plot_annotation(
title = "Added-Variable Plots",
subtitle = "steps ~ minutes + danceability + instrumentalness + tempo",
caption = "For each plot, all other predictors are being held constant")
avPlots.invis <- function(MODEL, ...) {
ff <- tempfile()
png(filename = ff)
OUT <- car::avPlots(MODEL, ...)
dev.off()
unlink(ff)
OUT }
avp <- avPlots.invis(lmod_steps_aic)
p1 <- ggplot(data = as.data.frame(avp[[1]]),
mapping = aes(x = mins_daily, y = steps_daily)) +
geom_point(fill = "transparent", color = "grey20") +
geom_smooth(method = 'lm', formula = 'y ~x', color = "#C2B280") +
labs(x = "Total Minutes Per Day",
y = "Steps Per Day") +
theme_bw() +
theme(panel.grid = element_blank())
p2 <- ggplot(data = as.data.frame(avp[[2]]),
mapping = aes(x = danceability_daily, y = steps_daily)) +
geom_point(color = "grey20") +
geom_smooth(method = 'lm', formula = 'y ~x', color = "#848482") +
labs(x = "Average Danceability Score",
y = "Steps Per Day") +
theme_bw() +
theme(panel.grid = element_blank())
p3 <- ggplot(data = as.data.frame(avp[[3]]),
mapping = aes(x = instrumentalness_daily, y = steps_daily)) +
geom_point( color = "grey20") +
geom_smooth(method = 'lm', formula = 'y ~x', color = "#008856") +
labs(x = "Average Instrumentalness Score",
y = "Steps Per Day") +
theme_bw() +
theme(panel.grid = element_blank())
p4 <- ggplot(data = as.data.frame(avp[[4]]),
mapping = aes(x = tempo_daily, y = steps_daily)) +
geom_point( color = "grey20") +
geom_smooth(method = 'lm', formula = 'y ~x', color = "#E68FAC") +
labs(x = "Average Tempo",
y = "Steps Per Day") +
theme_bw() +
theme(panel.grid = element_blank())
(p1 + p2) / (p3 + p4) + patchwork::plot_annotation(
title = "Added-Variable Plots",
subtitle = "steps ~ minutes + danceability + instrumentalness + tempo",
caption = "For each plot, all other predictors are being held constant")
pca_tidy_coef |>
filter(component %in% paste0("PC", 1:3)) |>
mutate(component = fct_inorder(component)) |>
ggplot(aes(value, terms, fill = terms)) +
scale_fill_manual(values = colors) +
geom_col(show.legend = FALSE) +
geom_vline(xintercept = 0, linetype = 1, size = 0.4) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL,
x = "Variable Loadings") +
theme_bw() +
theme(panel.grid = element_blank())
train_daily_pc <- train_daily |>
select(-steps_daily) |>
na.omit()
pca_rec <- recipe(~., data = train_daily_pc) |> #no outcome formula
step_pca(all_predictors()) #do pca
pca_prep <- prep(pca_rec) #actually run the recipe
pca_tidy_coef <- recipes::tidy(pca_prep, type = "coef", 1) #variable loadings
pca_tidy_var <- recipes::tidy(pca_prep, type = "variance", 1) #variance
pca_tidy_var |>
filter(terms == "percent variance") |>
mutate(component = fct_inorder(as.character(component))) |>
ggplot(aes(x = component, y = value)) +
geom_col(aes(fill = component)) +
scale_fill_manual(values = colors) +
geom_hline(yintercept = 10, size = 0.4) +
theme_bw() +
theme(legend.position = "none",
panel.grid = element_blank()) +
scale_y_continuous(limits = c(0,100)) +
labs(x = "Principle Component",
y = "Percent Variance")
pca_tidy_coef |>
filter(component %in% paste0("PC", 1:3)) |>
mutate(component = fct_inorder(component)) |>
ggplot(aes(value, terms, fill = terms)) +
scale_fill_manual(values = colors) +
geom_col(show.legend = FALSE) +
geom_vline(xintercept = 0, linetype = 1, size = 0.4) +
facet_wrap(~component, nrow = 1) +
labs(y = NULL,
x = "Variable Loadings") +
theme_bw() +
theme(panel.grid = element_blank())
train_daily |>
select(1, 3:10)
train_daily |>
select(1, 3:10) |>
pivot_longer(1:8) |>
ggplot(aes(x = value)) +
geom_histogram(fill = colors[[2]], color = "black", size = 0.2, bins = 15) +
facet_wrap(~name, scales = "free", nrow = 2)  +
labs(x = "Standardized Audio Feature Score",
y = "Count") +
theme(panel.grid = element_blank(),
legend.position = "none")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning=FALSE)
# load libraries
library(tidyverse) # Easily Install and Load the 'Tidyverse'
library(spotifyr) # R Wrapper for the 'Spotify' Web API
library(jsonlite) # A Simple and Robust JSON Parser and Generator for R
library(VIM) # Visualization and Imputation of Missing Values
library(naniar) # Data Structures, Summaries, and Visualisations for Missing Data
library(zoo) # S3 Infrastructure for Regular and Irregular Time Series (Z's Ordered Observations)
library(xts) # eXtensible Time Series
library(corrplot) # Visualization of a Correlation Matrix
library(car) # Companion to Applied Regression
library(performance) # Assessment of Regression Models Performance
library(olsrr) # Tools for Building OLS Regression Models
library(gtable) # Arrange 'Grobs' in Tables
library(gtsummary) # Presentation-Ready Data Summary and Analytic Result Tables
library(cols4all) # Colors for all
library(patchwork) # The Composer of Plots
library(tidymodels) # Easily Install and Load the 'Tidymodels' Packages
library(tidytext) # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools
library(citation)
#functions
source("scripts/functions.R")
# connect spotifyr to spotify developer app
Sys.setenv(SPOTIFY_CLIENT_ID = 'b98702e41ca940509e67f7b297d87c2e')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'a06b83088a974c3696875a7d9fb13114')
access_token <- get_spotify_access_token()
# general
theme_set(theme_bw())
colors <- c("#F3C300", "#875692", "#F38400", "#A1CAF1", "#BE0032", "#C2B280", "#848482", "#008856", "#E68FAC", "#0067A5")
colors2 <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288", "#AA4499", "#44AA99", "#999933", "#882255")
train_daily |>
select(1, 3:10)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning=FALSE)
# load libraries
library(tidyverse) # Easily Install and Load the 'Tidyverse'
library(spotifyr) # R Wrapper for the 'Spotify' Web API
library(jsonlite) # A Simple and Robust JSON Parser and Generator for R
library(VIM) # Visualization and Imputation of Missing Values
library(naniar) # Data Structures, Summaries, and Visualisations for Missing Data
library(zoo) # S3 Infrastructure for Regular and Irregular Time Series (Z's Ordered Observations)
library(xts) # eXtensible Time Series
library(corrplot) # Visualization of a Correlation Matrix
library(car) # Companion to Applied Regression
library(performance) # Assessment of Regression Models Performance
library(olsrr) # Tools for Building OLS Regression Models
library(gtable) # Arrange 'Grobs' in Tables
library(gtsummary) # Presentation-Ready Data Summary and Analytic Result Tables
library(cols4all) # Colors for all
library(patchwork) # The Composer of Plots
library(tidymodels) # Easily Install and Load the 'Tidymodels' Packages
library(tidytext) # Text Mining using 'dplyr', 'ggplot2', and Other Tidy Tools
library(citation)
#functions
source("scripts/functions.R")
# connect spotifyr to spotify developer app
Sys.setenv(SPOTIFY_CLIENT_ID = 'b98702e41ca940509e67f7b297d87c2e')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'a06b83088a974c3696875a7d9fb13114')
access_token <- get_spotify_access_token()
# general
theme_set(theme_bw())
colors <- c("#F3C300", "#875692", "#F38400", "#A1CAF1", "#BE0032", "#C2B280", "#848482", "#008856", "#E68FAC", "#0067A5")
colors2 <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288", "#AA4499", "#44AA99", "#999933", "#882255")
# These files take forever to read/load in, so all this code was run once and the output was saved to an RDS object which is then loaded in at the end.
# steps_raw <- dir("data/", pattern = "steps-*") |>
#   map_df(~fromJSON(file.path("data/", .), flatten = TRUE))
#
# steps <- steps_raw |>
#   separate(dateTime, into = c("date", "time"), sep = " ")
#
# steps <- steps |>
#   mutate(date = lubridate::mdy(date),
#          time = lubridate::hms(time),
#          steps = as.numeric(value)) |>
#   select(-c(value)) |>
#   filter(date >= "2016-03-01")
#
# steps <- steps |>
#   group_by(date) |>
#   summarize(steps_daily = sum(steps))
#
# steps$steps_daily[steps$steps_daily == 0] <- NA
# apply(steps, 2, VIM::countNA)
# which(is.na(steps$steps_daily), arr.ind = TRUE)
#There are 4 total days that have 0 steps. There are more days with a silly number of steps (<20) which indicates I left it to charge for 95% of the day and just put it on before bed. I will only count 0 step days as NA. There is no systematic pattern to these missing days. I think the best thing to do is to impute values with the median, so as to exclude the effect of outliers.
# steps <- naniar::impute_median_all(steps)
steps <- readRDS("cache/steps.rds")
# read in all .json files from directory as dataframes using jsonlite
spotify_raw <- dir("data/", pattern = "endsong_\\d.json") |>
map_df(~fromJSON(file.path("data/", .), flatten = TRUE))
# examine NA
apply(spotify_raw, 2, VIM::countNA)
hist(which(is.na(spotify_raw$master_metadata_track_name), arr.ind=TRUE), main = "Which row numbers contain NA?",  xlab= "Row number")
#I see that the NA are randomly scattered
spotify <- spotify_raw |>
select(ts, ms_played, conn_country, master_metadata_track_name, master_metadata_album_artist_name, master_metadata_album_album_name, spotify_track_uri, reason_start, reason_end, shuffle) |>
drop_na() |>
separate(ts, into = c("date", "time"), sep = "T") |>
mutate(time = str_replace(time, "Z", "")) |>
mutate(date = lubridate::as_date(date),
time = lubridate::hms(time)) |>  #convert time to proper format
separate(spotify_track_uri, into = c("rm1", "rm2", "track_id"), sep = ":") |>
select(-c("rm1", "rm2"))  |>
filter(date >= "2016-03-01")
#This code was run only once to retrieve audio features. Output was saved as an RDS object in "cache/"
# track_id <- bind_cols(track_id = spotify$track_id,
#                       fl = gl(1285, k = 100)[1:128407]) |> #create factor levels to use group_split on
#   group_split(fl, .keep = FALSE)
#
# audio_features <- list()
#
# for (i in 1:length(track_id)) {
#   audio_features[[i]] <- spotifyr::get_track_audio_features(unlist(track_id[[i]]))
# }
#saveRDS(audio_features, "cache/audio_features.rds")
audio_features <- readRDS("cache/audio_features.rds")
audio_features <- data.table::rbindlist(audio_features) |>
rename(track_id = id)
spotify <- bind_cols(spotify, audio_features) |>
select(-c("track_id...24")) |>
rename(track_id = "track_id...8")
#key, loudness, tempo, time signature are NOT 0 to 1
spotify <- spotify |>
mutate(loudness_norm = (loudness - min(loudness))/(max(loudness)- min(loudness)),
tempo_norm = (tempo - min(tempo))/(max(tempo)- min(tempo)),
time_signature_norm = (time_signature - min(time_signature))/(max(time_signature) - min(time_signature))) |>
select(-c(time, conn_country, reason_start, reason_end, type, uri, track_href, analysis_url, loudness, tempo, time_signature, speechiness)) |>
filter(master_metadata_album_artist_name != "Mark Williams") |> #Meditation track
relocate(17:19, .before = 16)
#I am going to remove 'key', I don't think it makes sense to keep it in, even normalized.
spotify_daily <- spotify |>
group_by(date) |>
summarize(mins_daily = sum(ms_played)/60000,
danceability_daily = mean(danceability),
energy_daily = mean(energy),
loudness_daily = mean(loudness_norm),
acousticness_daily = mean(acousticness),
instrumentalness_daily = mean(instrumentalness),
liveness_daily = mean(liveness),
valence_daily = mean(valence),
tempo_daily = mean(tempo_norm))
daily_data <- full_join(spotify_daily, steps, join_by = "date") #introduce NA here, days where i have steps but no music data
daily_data <- filter(daily_data, date >= "2016-05-26" & date <= "2022-03-14") #Chose to filter from this date since I have extremely limited music data before this date
apply(daily_data, 2, VIM::countNA)
which(is.na(daily_data$mins_daily), arr.ind = TRUE)
#All NA are at the bottom of the dataset but the dates they span are random ie. MAR.
#I did not remove NA's from this data set. They're probably interesting...
daily_data_scaled <- scale(daily_data[,2:11]) |>
bind_cols(date = daily_data$date) |>
relocate(date, .before = 1)
set.seed(123)
train_daily <- sample_n(daily_data_scaled, 0.8*nrow(daily_data))
test_daily <- anti_join(daily_data_scaled, train_daily)
rm(spotify_raw)
rm(spotify_daily)
rm(steps)
rm(audio_features)
gtsummary::tbl_summary(train_daily) |>
modify_caption("Table 1. Summary table showing the median and the 25th, 75th percentile and the number of missing values.")
train_daily |>
select(1, 3:10)
train_daily
train_daily |>
select(3:10)
train_daily |>
select(2:10)
train_daily |>
select(2:10) |>
pivot_longer(1:9) |>
ggplot(aes(x = value)) +
geom_histogram(fill = colors[[2]], color = "black", size = 0.2, bins = 15) +
facet_wrap(~name, scales = "free", nrow = 2)  +
labs(x = "Standardized Audio Feature Score",
y = "Count") +
theme(panel.grid = element_blank(),
legend.position = "none")
train_daily |>
select(2:10) |>
pivot_longer(1:9) |>
ggplot(aes(x = value)) +
geom_histogram(fill = colors[[2]], color = "black", size = 0.2, bins = 15) +
facet_wrap(~name, scales = "free", nrow = 2, ncol = 4)  +
labs(x = "Standardized Audio Feature Score",
y = "Count") +
theme(panel.grid = element_blank(),
legend.position = "none")
train_daily |>
select(2:10) |>
pivot_longer(1:9) |>
ggplot(aes(x = value)) +
geom_histogram(fill = colors[[2]], color = "black", size = 0.2, bins = 15) +
facet_wrap(~name, scales = "free", nrow = 2, ncol = 5)  +
labs(x = "Standardized Audio Feature Score",
y = "Count") +
theme(panel.grid = element_blank(),
legend.position = "none")
train_daily
train_daily |>
select(2:11)
train_daily |>
select(2:11) |>
pivot_longer(1:9) |>
ggplot(aes(x = value)) +
geom_histogram(fill = colors[[2]], color = "black", size = 0.2, bins = 15) +
facet_wrap(~name, scales = "free", nrow = 2)  +
labs(x = "Standardized Audio Feature Score",
y = "Count") +
theme(panel.grid = element_blank(),
legend.position = "none")
train_daily |>
select(2:11) |>
pivot_longer(1:9) |>
ggplot(aes(x = value)) +
geom_histogram(fill = colors[[2]], color = "black", size = 0.2, bins = 15) +
facet_wrap(~name, scales = "free", nrow = 3)  +
labs(x = "Standardized Audio Feature Score",
y = "Count") +
theme(panel.grid = element_blank(),
legend.position = "none")
train_daily |>
select(2:11) |>
pivot_longer(1:9) |>
ggplot(aes(x = value)) +
geom_histogram(fill = colors[[2]], color = "black", size = 0.2, bins = 15) +
facet_wrap(~name, scales = "free", nrow = 2, ncol = 5)  +
labs(x = "Standardized Audio Feature Score",
y = "Count") +
theme(panel.grid = element_blank(),
legend.position = "none")
